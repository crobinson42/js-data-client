{"id":"node_modules/@therms/models/js-data/Component.js","dependencies":[{"name":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/package.json","includedInParent":true,"mtime":1538067174380},{"name":"/Users/coryrobinson/projects/js-data-client/package.json","includedInParent":true,"mtime":1538017596842},{"name":"./utils","loc":{"line":1,"column":18},"parent":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Component.js","resolved":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/utils.js"},{"name":"./Settable","loc":{"line":2,"column":21},"parent":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Component.js","resolved":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Settable.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _Settable = require('./Settable');\n\nvar _Settable2 = _interopRequireDefault(_Settable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The base class from which all JSData components inherit some basic\n * functionality.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * See {@link Component.extend} for an example of using {@link Component} as a\n * base class.\n *\n *```javascript\n * import {Component} from 'js-data'\n * ```\n *\n * @class Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @returns {Component} A new {@link Component} instance.\n * @since 3.0.0\n */\nfunction Component(opts) {\n  _Settable2.default.call(this);\n  opts || (opts = {});\n\n  /**\n   * Whether to enable debug-level logs for this component. Anything that\n   * extends `Component` inherits this option and the corresponding logging\n   * functionality.\n   *\n   * @example <caption>Component#debug</caption>\n   * const JSData = require('js-data');\n   * const { Component } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const component = new Component();\n   * component.log('debug', 'some message'); // nothing gets logged\n   * // Display debug logs:\n   * component.debug = true;\n   * component.log('debug', 'other message'); // this DOES get logged\n   *\n   * @default false\n   * @name Component#debug\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  this.debug = opts.hasOwnProperty('debug') ? !!opts.debug : false;\n\n  /**\n   * Event listeners attached to this Component. __Do not modify.__ Use\n   * {@link Component#on} and {@link Component#off} instead.\n   *\n   * @name Component#_listeners\n   * @private\n   * @instance\n   * @since 3.0.0\n   * @type {Object}\n   */\n  Object.defineProperty(this, '_listeners', { value: {}, writable: true });\n}\n\nexports.default = _Settable2.default.extend({\n  constructor: Component\n});\n\n/**\n * Create a subclass of this Component:\n *\n * @example <caption>Component.extend</caption>\n * const JSData = require('js-data');\n * const { Component } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomComponentClass extends Component {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customComponent = new CustomComponentClass();\n * console.log(customComponent.foo());\n * console.log(CustomComponentClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherComponentClass = Component.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherComponent = new OtherComponentClass();\n * console.log(otherComponent.foo());\n * console.log(OtherComponentClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherComponentClass () {\n *   Component.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Component.extend({\n *   constructor: AnotherComponentClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherComponent = new AnotherComponentClass();\n * console.log(anotherComponent.created_at);\n * console.log(anotherComponent.foo());\n * console.log(AnotherComponentClass.beep());\n *\n * @method Component.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Component class.\n * @since 3.0.0\n */\n\nComponent.extend = _utils2.default.extend;\n\n/**\n * Log the provided values at the \"debug\" level. Debug-level logs are only\n * logged if {@link Component#debug} is `true`.\n *\n * `.dbg(...)` is shorthand for `.log('debug', ...)`.\n *\n * @method Component#dbg\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\n/**\n * Log the provided values. By default sends values to `console[level]`.\n * Debug-level logs are only logged if {@link Component#debug} is `true`.\n *\n * Will attempt to use appropriate `console` methods if they are available.\n *\n * @method Component#log\n * @param {string} level Log level.\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\n_utils2.default.logify(Component.prototype);\n\n/**\n * Register a new event listener on this Component.\n *\n * @example\n * // Listen for all \"afterCreate\" events in a DataStore\n * store.on('afterCreate', (mapperName, props, opts, result) => {\n *   console.log(mapperName); // \"post\"\n *   console.log(props.id); // undefined\n *   console.log(result.id); // 1234\n * });\n * store.create('post', { title: 'Modeling your data' }).then((post) => {\n *   console.log(post.id); // 1234\n * });\n *\n * @example\n * // Listen for the \"add\" event on a collection\n * collection.on('add', (records) => {\n *   console.log(records); // [...]\n * });\n *\n * @example\n * // Listen for \"change\" events on a record\n * post.on('change', (record, changes) => {\n *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n * });\n * post.title = 'Modeling your data';\n *\n * @method Component#on\n * @param {string} event Name of event to subsribe to.\n * @param {Function} listener Listener function to handle the event.\n * @param {*} [ctx] Optional content in which to invoke the listener.\n * @since 3.0.0\n */\n/**\n * Remove an event listener from this Component. If no listener is provided,\n * then all listeners for the specified event will be removed. If no event is\n * specified then all listeners for all events will be removed.\n *\n * @example\n * // Remove a particular listener for a particular event\n * collection.off('add', handler);\n *\n * @example\n * // Remove all listeners for a particular event\n * record.off('change');\n *\n * @example\n * // Remove all listeners to all events\n * store.off();\n *\n * @method Component#off\n * @param {string} [event] Name of event to unsubsribe to.\n * @param {Function} [listener] Listener to remove.\n * @since 3.0.0\n */\n/**\n * Trigger an event on this Component.\n *\n * @example <caption>Component#emit</caption>\n * // import { Collection, DataStore } from 'js-data';\n * const JSData = require('js-data');\n * const { Collection, DataStore } = JSData;\n *\n * const collection = new Collection();\n * collection.on('foo', function (msg) {\n *   console.log(msg);\n * });\n * collection.emit('foo', 'bar');\n *\n * const store = new DataStore();\n * store.on('beep', function (msg) {\n *   console.log(msg);\n * });\n * store.emit('beep', 'boop');\n *\n * @method Component#emit\n * @param {string} event Name of event to emit.\n * @param {...*} [args] Arguments to pass to any listeners.\n * @since 3.0.0\n */\n_utils2.default.eventify(Component.prototype, function () {\n  return this._listeners;\n}, function (value) {\n  this._listeners = value;\n});","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":4,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":24,"column":0}},{"name":"Component","generated":{"line":37,"column":9},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":24,"column":9}},{"generated":{"line":37,"column":18},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":24,"column":0}},{"name":"opts","generated":{"line":37,"column":19},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":24,"column":20}},{"generated":{"line":37,"column":23},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":24,"column":0}},{"generated":{"line":37,"column":25},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":24,"column":26}},{"name":"Settable","generated":{"line":38,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":25,"column":2}},{"name":"call","generated":{"line":38,"column":21},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":25,"column":11}},{"generated":{"line":38,"column":25},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":25,"column":2}},{"generated":{"line":38,"column":26},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":25,"column":16}},{"generated":{"line":38,"column":30},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":25,"column":2}},{"name":"opts","generated":{"line":39,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":26,"column":2}},{"name":"opts","generated":{"line":39,"column":11},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":26,"column":11}},{"generated":{"line":39,"column":18},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":26,"column":18}},{"generated":{"line":39,"column":20},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":26,"column":2}},{"generated":{"line":41,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":28,"column":2}},{"generated":{"line":62,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":2}},{"name":"debug","generated":{"line":62,"column":7},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":7}},{"generated":{"line":62,"column":12},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":2}},{"name":"opts","generated":{"line":62,"column":15},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":15}},{"name":"hasOwnProperty","generated":{"line":62,"column":20},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":20}},{"generated":{"line":62,"column":34},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":15}},{"generated":{"line":62,"column":35},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":35}},{"generated":{"line":62,"column":42},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":15}},{"generated":{"line":62,"column":46},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":46}},{"generated":{"line":62,"column":47},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":47}},{"name":"opts","generated":{"line":62,"column":48},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":48}},{"name":"debug","generated":{"line":62,"column":53},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":53}},{"generated":{"line":62,"column":58},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":15}},{"generated":{"line":62,"column":61},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":61}},{"generated":{"line":62,"column":66},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":49,"column":2}},{"generated":{"line":64,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":51,"column":2}},{"name":"Object","generated":{"line":74,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":2}},{"name":"defineProperty","generated":{"line":74,"column":9},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":9}},{"generated":{"line":74,"column":23},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":2}},{"generated":{"line":74,"column":24},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":24}},{"generated":{"line":74,"column":28},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":2}},{"generated":{"line":74,"column":30},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":30}},{"generated":{"line":74,"column":42},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":2}},{"generated":{"line":74,"column":44},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":44}},{"name":"value","generated":{"line":74,"column":46},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":46}},{"generated":{"line":74,"column":53},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":53}},{"generated":{"line":74,"column":55},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":44}},{"name":"writable","generated":{"line":74,"column":57},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":57}},{"generated":{"line":74,"column":67},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":67}},{"generated":{"line":74,"column":71},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":44}},{"generated":{"line":74,"column":73},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":61,"column":2}},{"generated":{"line":75,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":62,"column":1}},{"name":"Settable","generated":{"line":77,"column":18},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":64,"column":15}},{"name":"extend","generated":{"line":77,"column":37},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":64,"column":24}},{"generated":{"line":77,"column":43},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":64,"column":15}},{"generated":{"line":77,"column":44},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":64,"column":31}},{"name":"constructor","generated":{"line":78,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":65,"column":2}},{"name":"Component","generated":{"line":78,"column":15},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":65,"column":15}},{"generated":{"line":79,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":64,"column":31}},{"generated":{"line":79,"column":1},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":64,"column":15}},{"generated":{"line":81,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":68,"column":0}},{"name":"Component","generated":{"line":134,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":120,"column":0}},{"name":"extend","generated":{"line":134,"column":10},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":120,"column":10}},{"generated":{"line":134,"column":16},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":120,"column":0}},{"name":"utils","generated":{"line":134,"column":19},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":120,"column":19}},{"name":"extend","generated":{"line":134,"column":35},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":120,"column":25}},{"generated":{"line":134,"column":41},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":120,"column":0}},{"generated":{"line":136,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":122,"column":0}},{"generated":{"line":146,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":132,"column":0}},{"name":"utils","generated":{"line":157,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":143,"column":0}},{"name":"logify","generated":{"line":157,"column":16},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":143,"column":6}},{"generated":{"line":157,"column":22},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":143,"column":0}},{"name":"Component","generated":{"line":157,"column":23},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":143,"column":13}},{"name":"prototype","generated":{"line":157,"column":33},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":143,"column":23}},{"generated":{"line":157,"column":42},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":143,"column":0}},{"generated":{"line":159,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":145,"column":0}},{"generated":{"line":192,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":178,"column":0}},{"generated":{"line":214,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":200,"column":0}},{"name":"utils","generated":{"line":239,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":225,"column":0}},{"name":"eventify","generated":{"line":239,"column":16},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":225,"column":6}},{"generated":{"line":239,"column":24},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":225,"column":0}},{"name":"Component","generated":{"line":239,"column":25},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":226,"column":2}},{"name":"prototype","generated":{"line":239,"column":35},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":226,"column":12}},{"generated":{"line":239,"column":44},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":225,"column":0}},{"generated":{"line":239,"column":46},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":227,"column":2}},{"generated":{"line":239,"column":58},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":227,"column":14}},{"generated":{"line":240,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":228,"column":4}},{"generated":{"line":240,"column":9},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":228,"column":11}},{"name":"_listeners","generated":{"line":240,"column":14},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":228,"column":16}},{"generated":{"line":240,"column":24},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":228,"column":4}},{"generated":{"line":241,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":229,"column":3}},{"generated":{"line":241,"column":1},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":225,"column":0}},{"generated":{"line":241,"column":3},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":230,"column":2}},{"name":"value","generated":{"line":241,"column":13},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":230,"column":12}},{"generated":{"line":241,"column":18},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":230,"column":2}},{"generated":{"line":241,"column":20},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":230,"column":19}},{"generated":{"line":242,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":231,"column":4}},{"name":"_listeners","generated":{"line":242,"column":7},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":231,"column":9}},{"generated":{"line":242,"column":17},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":231,"column":4}},{"name":"value","generated":{"line":242,"column":20},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":231,"column":22}},{"generated":{"line":242,"column":25},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":231,"column":4}},{"generated":{"line":243,"column":0},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":232,"column":3}},{"generated":{"line":243,"column":1},"source":"node_modules/@therms/models/js-data/Component.js","original":{"line":225,"column":0}}],"sources":{"node_modules/@therms/models/js-data/Component.js":"import utils from './utils'\nimport Settable from './Settable'\n\n/**\n * The base class from which all JSData components inherit some basic\n * functionality.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * See {@link Component.extend} for an example of using {@link Component} as a\n * base class.\n *\n *```javascript\n * import {Component} from 'js-data'\n * ```\n *\n * @class Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @returns {Component} A new {@link Component} instance.\n * @since 3.0.0\n */\nfunction Component (opts) {\n  Settable.call(this)\n  opts || (opts = {})\n\n  /**\n   * Whether to enable debug-level logs for this component. Anything that\n   * extends `Component` inherits this option and the corresponding logging\n   * functionality.\n   *\n   * @example <caption>Component#debug</caption>\n   * const JSData = require('js-data');\n   * const { Component } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const component = new Component();\n   * component.log('debug', 'some message'); // nothing gets logged\n   * // Display debug logs:\n   * component.debug = true;\n   * component.log('debug', 'other message'); // this DOES get logged\n   *\n   * @default false\n   * @name Component#debug\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  this.debug = opts.hasOwnProperty('debug') ? !!opts.debug : false\n\n  /**\n   * Event listeners attached to this Component. __Do not modify.__ Use\n   * {@link Component#on} and {@link Component#off} instead.\n   *\n   * @name Component#_listeners\n   * @private\n   * @instance\n   * @since 3.0.0\n   * @type {Object}\n   */\n  Object.defineProperty(this, '_listeners', { value: {}, writable: true })\n}\n\nexport default Settable.extend({\n  constructor: Component\n})\n\n/**\n * Create a subclass of this Component:\n *\n * @example <caption>Component.extend</caption>\n * const JSData = require('js-data');\n * const { Component } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomComponentClass extends Component {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customComponent = new CustomComponentClass();\n * console.log(customComponent.foo());\n * console.log(CustomComponentClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherComponentClass = Component.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherComponent = new OtherComponentClass();\n * console.log(otherComponent.foo());\n * console.log(OtherComponentClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherComponentClass () {\n *   Component.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Component.extend({\n *   constructor: AnotherComponentClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherComponent = new AnotherComponentClass();\n * console.log(anotherComponent.created_at);\n * console.log(anotherComponent.foo());\n * console.log(AnotherComponentClass.beep());\n *\n * @method Component.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Component class.\n * @since 3.0.0\n */\nComponent.extend = utils.extend\n\n/**\n * Log the provided values at the \"debug\" level. Debug-level logs are only\n * logged if {@link Component#debug} is `true`.\n *\n * `.dbg(...)` is shorthand for `.log('debug', ...)`.\n *\n * @method Component#dbg\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\n/**\n * Log the provided values. By default sends values to `console[level]`.\n * Debug-level logs are only logged if {@link Component#debug} is `true`.\n *\n * Will attempt to use appropriate `console` methods if they are available.\n *\n * @method Component#log\n * @param {string} level Log level.\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\nutils.logify(Component.prototype)\n\n/**\n * Register a new event listener on this Component.\n *\n * @example\n * // Listen for all \"afterCreate\" events in a DataStore\n * store.on('afterCreate', (mapperName, props, opts, result) => {\n *   console.log(mapperName); // \"post\"\n *   console.log(props.id); // undefined\n *   console.log(result.id); // 1234\n * });\n * store.create('post', { title: 'Modeling your data' }).then((post) => {\n *   console.log(post.id); // 1234\n * });\n *\n * @example\n * // Listen for the \"add\" event on a collection\n * collection.on('add', (records) => {\n *   console.log(records); // [...]\n * });\n *\n * @example\n * // Listen for \"change\" events on a record\n * post.on('change', (record, changes) => {\n *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n * });\n * post.title = 'Modeling your data';\n *\n * @method Component#on\n * @param {string} event Name of event to subsribe to.\n * @param {Function} listener Listener function to handle the event.\n * @param {*} [ctx] Optional content in which to invoke the listener.\n * @since 3.0.0\n */\n/**\n * Remove an event listener from this Component. If no listener is provided,\n * then all listeners for the specified event will be removed. If no event is\n * specified then all listeners for all events will be removed.\n *\n * @example\n * // Remove a particular listener for a particular event\n * collection.off('add', handler);\n *\n * @example\n * // Remove all listeners for a particular event\n * record.off('change');\n *\n * @example\n * // Remove all listeners to all events\n * store.off();\n *\n * @method Component#off\n * @param {string} [event] Name of event to unsubsribe to.\n * @param {Function} [listener] Listener to remove.\n * @since 3.0.0\n */\n/**\n * Trigger an event on this Component.\n *\n * @example <caption>Component#emit</caption>\n * // import { Collection, DataStore } from 'js-data';\n * const JSData = require('js-data');\n * const { Collection, DataStore } = JSData;\n *\n * const collection = new Collection();\n * collection.on('foo', function (msg) {\n *   console.log(msg);\n * });\n * collection.emit('foo', 'bar');\n *\n * const store = new DataStore();\n * store.on('beep', function (msg) {\n *   console.log(msg);\n * });\n * store.emit('beep', 'boop');\n *\n * @method Component#emit\n * @param {string} event Name of event to emit.\n * @param {...*} [args] Arguments to pass to any listeners.\n * @since 3.0.0\n */\nutils.eventify(\n  Component.prototype,\n  function () {\n    return this._listeners\n  },\n  function (value) {\n    this._listeners = value\n  }\n)\n"},"lineCount":null}},"hash":"26c486dac1d03fe3e438e612bc9ec350","cacheData":{"env":{}}}