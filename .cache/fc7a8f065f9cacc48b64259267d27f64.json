{"id":"node_modules/@therms/models/js-data/Container.js","dependencies":[{"name":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/package.json","includedInParent":true,"mtime":1538067174380},{"name":"/Users/coryrobinson/projects/js-data-client/package.json","includedInParent":true,"mtime":1538017596842},{"name":"./utils","loc":{"line":1,"column":18},"parent":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Container.js","resolved":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/utils.js"},{"name":"./Component","loc":{"line":2,"column":22},"parent":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Container.js","resolved":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Component.js"},{"name":"./Mapper","loc":{"line":3,"column":19},"parent":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Container.js","resolved":"/Users/coryrobinson/projects/js-data-client/node_modules/@therms/models/js-data/Mapper.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proxiedMapperMethods = undefined;\nexports.Container = Container;\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _Component = require('./Component');\n\nvar _Component2 = _interopRequireDefault(_Component);\n\nvar _Mapper = require('./Mapper');\n\nvar _Mapper2 = _interopRequireDefault(_Mapper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst DOMAIN = 'Container';\n\nconst proxiedMapperMethods = exports.proxiedMapperMethods = [\n/**\n * Wrapper for {@link Mapper#count}.\n *\n * @example\n * // Get the number of published blog posts\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.count('post', { status: 'published' }).then((numPublished) => {\n *   console.log(numPublished); // e.g. 45\n * });\n *\n * @method Container#count\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {object} [query] See {@link Mapper#count}.\n * @param {object} [opts] See {@link Mapper#count}.\n * @returns {Promise} See {@link Mapper#count}.\n * @see Mapper#count\n * @since 3.0.0\n */\n'count',\n\n/**\n * Fired during {@link Container#create}. See\n * {@link Container~beforeCreateListener} for how to listen for this event.\n *\n * @event Container#beforeCreate\n * @see Container~beforeCreateListener\n * @see Container#create\n */\n/**\n * Callback signature for the {@link Container#event:beforeCreate} event.\n *\n * @example\n * function onBeforeCreate (mapperName, props, opts) {\n *   // do something\n * }\n * store.on('beforeCreate', onBeforeCreate);\n *\n * @callback Container~beforeCreateListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n * @see Container#event:beforeCreate\n * @see Container#create\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#create}. See\n * {@link Container~afterCreateListener} for how to listen for this event.\n *\n * @event Container#afterCreate\n * @see Container~afterCreateListener\n * @see Container#create\n */\n/**\n * Callback signature for the {@link Container#event:afterCreate} event.\n *\n * @example\n * function onAfterCreate (mapperName, props, opts, result) {\n *   // do something\n * }\n * store.on('afterCreate', onAfterCreate);\n *\n * @callback Container~afterCreateListener\n * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n * @see Container#event:afterCreate\n * @see Container#create\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#create}.\n *\n * @example\n * // Create and save a new blog post\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.create('post', {\n *   title: 'Modeling your data',\n *   status: 'draft'\n * }).then((post) => {\n *   console.log(post); // { id: 1234, status: 'draft', ... }\n * });\n *\n * @fires Container#beforeCreate\n * @fires Container#afterCreate\n * @method Container#create\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {object} props See {@link Mapper#create}.\n * @param {object} [opts] See {@link Mapper#create}.\n * @returns {Promise} See {@link Mapper#create}.\n * @see Mapper#create\n * @since 3.0.0\n */\n'create',\n\n/**\n * Fired during {@link Container#createMany}. See\n * {@link Container~beforeCreateManyListener} for how to listen for this event.\n *\n * @event Container#beforeCreateMany\n * @see Container~beforeCreateManyListener\n * @see Container#createMany\n */\n/**\n * Callback signature for the {@link Container#event:beforeCreateMany} event.\n *\n * @example\n * function onBeforeCreateMany (mapperName, records, opts) {\n *   // do something\n * }\n * store.on('beforeCreateMany', onBeforeCreateMany);\n *\n * @callback Container~beforeCreateManyListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n * @see Container#event:beforeCreateMany\n * @see Container#createMany\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#createMany}. See\n * {@link Container~afterCreateManyListener} for how to listen for this event.\n *\n * @event Container#afterCreateMany\n * @see Container~afterCreateManyListener\n * @see Container#createMany\n */\n/**\n * Callback signature for the {@link Container#event:afterCreateMany} event.\n *\n * @example\n * function onAfterCreateMany (mapperName, records, opts, result) {\n *   // do something\n * }\n * store.on('afterCreateMany', onAfterCreateMany);\n *\n * @callback Container~afterCreateManyListener\n * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n * @see Container#event:afterCreateMany\n * @see Container#createMany\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#createMany}.\n *\n * @example\n * // Create and save several new blog posts\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.createMany('post', [{\n *   title: 'Modeling your data',\n *   status: 'draft'\n * }, {\n *   title: 'Reading data',\n *   status: 'draft'\n * }]).then((posts) => {\n *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n * });\n *\n * @fires Container#beforeCreateMany\n * @fires Container#afterCreateMany\n * @method Container#createMany\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {Record[]} records See {@link Mapper#createMany}.\n * @param {object} [opts] See {@link Mapper#createMany}.\n * @returns {Promise} See {@link Mapper#createMany}.\n * @see Mapper#createMany\n * @since 3.0.0\n */\n'createMany',\n\n/**\n * Wrapper for {@link Mapper#createRecord}.\n *\n * __Note:__ This method does __not__ interact with any adapter, and does\n * __not__ save any data. It only creates new objects in memory.\n *\n * @example\n * // Create empty unsaved record instance\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('post');\n * const post = PostMapper.createRecord();\n *\n * @method Container#createRecord\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {Object|Object[]} props See {@link Mapper#createRecord}.\n * @param {object} [opts] See {@link Mapper#createRecord}.\n * @returns {Promise} See {@link Mapper#createRecord}.\n * @see Mapper#createRecord\n * @since 3.0.0\n */\n'createRecord',\n\n/**\n * Fired during {@link Container#destroy}. See\n * {@link Container~beforeDestroyListener} for how to listen for this event.\n *\n * @event Container#beforeDestroy\n * @see Container~beforeDestroyListener\n * @see Container#destroy\n */\n/**\n * Callback signature for the {@link Container#event:beforeDestroy} event.\n *\n * @example\n * function onBeforeDestroy (mapperName, id, opts) {\n *   // do something\n * }\n * store.on('beforeDestroy', onBeforeDestroy);\n *\n * @callback Container~beforeDestroyListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n * @see Container#event:beforeDestroy\n * @see Container#destroy\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#destroy}. See\n * {@link Container~afterDestroyListener} for how to listen for this event.\n *\n * @event Container#afterDestroy\n * @see Container~afterDestroyListener\n * @see Container#destroy\n */\n/**\n * Callback signature for the {@link Container#event:afterDestroy} event.\n *\n * @example\n * function onAfterDestroy (mapperName, id, opts, result) {\n *   // do something\n * }\n * store.on('afterDestroy', onAfterDestroy);\n *\n * @callback Container~afterDestroyListener\n * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n * @see Container#event:afterDestroy\n * @see Container#destroy\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#destroy}.\n *\n * @example\n * // Destroy a specific blog post\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.destroy('post', 1234).then(() => {\n *   // Blog post #1234 has been destroyed\n * });\n *\n * @fires Container#beforeDestroy\n * @fires Container#afterDestroy\n * @method Container#destroy\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {(string|number)} id See {@link Mapper#destroy}.\n * @param {object} [opts] See {@link Mapper#destroy}.\n * @returns {Promise} See {@link Mapper#destroy}.\n * @see Mapper#destroy\n * @since 3.0.0\n */\n'destroy',\n\n/**\n * Fired during {@link Container#destroyAll}. See\n * {@link Container~beforeDestroyAllListener} for how to listen for this event.\n *\n * @event Container#beforeDestroyAll\n * @see Container~beforeDestroyAllListener\n * @see Container#destroyAll\n */\n/**\n * Callback signature for the {@link Container#event:beforeDestroyAll} event.\n *\n * @example\n * function onBeforeDestroyAll (mapperName, query, opts) {\n *   // do something\n * }\n * store.on('beforeDestroyAll', onBeforeDestroyAll);\n *\n * @callback Container~beforeDestroyAllListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n * @see Container#event:beforeDestroyAll\n * @see Container#destroyAll\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#destroyAll}. See\n * {@link Container~afterDestroyAllListener} for how to listen for this event.\n *\n * @event Container#afterDestroyAll\n * @see Container~afterDestroyAllListener\n * @see Container#destroyAll\n */\n/**\n * Callback signature for the {@link Container#event:afterDestroyAll} event.\n *\n * @example\n * function onAfterDestroyAll (mapperName, query, opts, result) {\n *   // do something\n * }\n * store.on('afterDestroyAll', onAfterDestroyAll);\n *\n * @callback Container~afterDestroyAllListener\n * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n * @see Container#event:afterDestroyAll\n * @see Container#destroyAll\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#destroyAll}.\n *\n * @example\n * // Destroy all \"draft\" blog posts\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.destroyAll('post', { status: 'draft' }).then(() => {\n *   // All \"draft\" blog posts have been destroyed\n * });\n *\n * @fires Container#beforeDestroyAll\n * @fires Container#afterDestroyAll\n * @method Container#destroyAll\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {object} [query] See {@link Mapper#destroyAll}.\n * @param {object} [opts] See {@link Mapper#destroyAll}.\n * @returns {Promise} See {@link Mapper#destroyAll}.\n * @see Mapper#destroyAll\n * @since 3.0.0\n */\n'destroyAll',\n\n/**\n * Fired during {@link Container#find}. See\n * {@link Container~beforeFindListener} for how to listen for this event.\n *\n * @event Container#beforeFind\n * @see Container~beforeFindListener\n * @see Container#find\n */\n/**\n * Callback signature for the {@link Container#event:beforeFind} event.\n *\n * @example\n * function onBeforeFind (mapperName, id, opts) {\n *   // do something\n * }\n * store.on('beforeFind', onBeforeFind);\n *\n * @callback Container~beforeFindListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n * @see Container#event:beforeFind\n * @see Container#find\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#find}. See\n * {@link Container~afterFindListener} for how to listen for this event.\n *\n * @event Container#afterFind\n * @see Container~afterFindListener\n * @see Container#find\n */\n/**\n * Callback signature for the {@link Container#event:afterFind} event.\n *\n * @example\n * function onAfterFind (mapperName, id, opts, result) {\n *   // do something\n * }\n * store.on('afterFind', onAfterFind);\n *\n * @callback Container~afterFindListener\n * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n * @see Container#event:afterFind\n * @see Container#find\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#find}.\n *\n * @example\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.find('post', 1).then((post) => {\n *   console.log(post) // { id: 1, ...}\n * });\n *\n * @fires Container#beforeFind\n * @fires Container#afterFind\n * @method Container#find\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {(string|number)} id See {@link Mapper#find}.\n * @param {object} [opts] See {@link Mapper#find}.\n * @returns {Promise} See {@link Mapper#find}.\n * @see Mapper#find\n * @since 3.0.0\n */\n'find',\n\n/**\n * Fired during {@link Container#findAll}. See\n * {@link Container~beforeFindAllListener} for how to listen for this event.\n *\n * @event Container#beforeFindAll\n * @see Container~beforeFindAllListener\n * @see Container#findAll\n */\n/**\n * Callback signature for the {@link Container#event:beforeFindAll} event.\n *\n * @example\n * function onBeforeFindAll (mapperName, query, opts) {\n *   // do something\n * }\n * store.on('beforeFindAll', onBeforeFindAll);\n *\n * @callback Container~beforeFindAllListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n * @see Container#event:beforeFindAll\n * @see Container#findAll\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#findAll}. See\n * {@link Container~afterFindAllListener} for how to listen for this event.\n *\n * @event Container#afterFindAll\n * @see Container~afterFindAllListener\n * @see Container#findAll\n */\n/**\n * Callback signature for the {@link Container#event:afterFindAll} event.\n *\n * @example\n * function onAfterFindAll (mapperName, query, opts, result) {\n *   // do something\n * }\n * store.on('afterFindAll', onAfterFindAll);\n *\n * @callback Container~afterFindAllListener\n * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n * @see Container#event:afterFindAll\n * @see Container#findAll\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#createRecord}.\n *\n * @example\n * // Find all \"published\" blog posts\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.findAll('post', { status: 'published' }).then((posts) => {\n *   console.log(posts); // [{ id: 1, ...}, ...]\n * });\n *\n * @fires Container#beforeFindAll\n * @fires Container#afterFindAll\n * @method Container#findAll\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {object} [query] See {@link Mapper#findAll}.\n * @param {object} [opts] See {@link Mapper#findAll}.\n * @returns {Promise} See {@link Mapper#findAll}.\n * @see Mapper#findAll\n * @since 3.0.0\n */\n'findAll',\n\n/**\n * Wrapper for {@link Mapper#getSchema}.\n *\n * @method Container#getSchema\n * @param {string} name Name of the {@link Mapper} to target.\n * @returns {Schema} See {@link Mapper#getSchema}.\n * @see Mapper#getSchema\n * @since 3.0.0\n */\n'getSchema',\n\n/**\n * Wrapper for {@link Mapper#is}.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('post');\n * const post = store.createRecord();\n *\n * console.log(store.is('post', post)); // true\n * // Equivalent to what's above\n * console.log(post instanceof store.getMapper('post').recordClass); // true\n *\n * @method Container#is\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {Object|Record} record See {@link Mapper#is}.\n * @returns {boolean} See {@link Mapper#is}.\n * @see Mapper#is\n * @since 3.0.0\n */\n'is',\n\n/**\n * Wrapper for {@link Mapper#sum}.\n *\n * @example\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('purchase_order');\n *\n * store.sum('purchase_order', 'amount', { status: 'paid' }).then((amountPaid) => {\n *   console.log(amountPaid); // e.g. 451125.34\n * });\n *\n * @method Container#sum\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {string} field See {@link Mapper#sum}.\n * @param {object} [query] See {@link Mapper#sum}.\n * @param {object} [opts] See {@link Mapper#sum}.\n * @returns {Promise} See {@link Mapper#sum}.\n * @see Mapper#sum\n * @since 3.0.0\n */\n'sum',\n\n/**\n * Wrapper for {@link Mapper#toJSON}.\n *\n * @example\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('person', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' },\n *       id: { type: 'string' }\n *     }\n *   }\n * });\n * const person = store.createRecord('person', { id: 1, name: 'John', foo: 'bar' });\n * // \"foo\" is stripped by toJSON()\n * console.log(store.toJSON('person', person)); // {\"id\":1,\"name\":\"John\"}\n *\n * store.defineMapper('personRelaxed', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' },\n *       id: { type: 'string' }\n *     },\n *     additionalProperties: true\n *   }\n * });\n * const person2 = store.createRecord('personRelaxed', { id: 1, name: 'John', foo: 'bar' });\n * // \"foo\" is not stripped by toJSON\n * console.log(store.toJSON('personRelaxed', person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n *\n * @method Container#toJSON\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {Record|Record[]} records See {@link Mapper#toJSON}.\n * @param {object} [opts] See {@link Mapper#toJSON}.\n * @returns {Object|Object[]} See {@link Mapper#toJSON}.\n * @see Mapper#toJSON\n * @since 3.0.0\n */\n'toJSON',\n\n/**\n * Fired during {@link Container#update}. See\n * {@link Container~beforeUpdateListener} for how to listen for this event.\n *\n * @event Container#beforeUpdate\n * @see Container~beforeUpdateListener\n * @see Container#update\n */\n/**\n * Callback signature for the {@link Container#event:beforeUpdate} event.\n *\n * @example\n * function onBeforeUpdate (mapperName, id, props, opts) {\n *   // do something\n * }\n * store.on('beforeUpdate', onBeforeUpdate);\n *\n * @callback Container~beforeUpdateListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n * @see Container#event:beforeUpdate\n * @see Container#update\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#update}. See\n * {@link Container~afterUpdateListener} for how to listen for this event.\n *\n * @event Container#afterUpdate\n * @see Container~afterUpdateListener\n * @see Container#update\n */\n/**\n * Callback signature for the {@link Container#event:afterUpdate} event.\n *\n * @example\n * function onAfterUpdate (mapperName, id, props, opts, result) {\n *   // do something\n * }\n * store.on('afterUpdate', onAfterUpdate);\n *\n * @callback Container~afterUpdateListener\n * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n * @see Container#event:afterUpdate\n * @see Container#update\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#update}.\n *\n * @example\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.update('post', 1234, {\n *   status: 'published',\n *   published_at: new Date()\n * }).then((post) => {\n *   console.log(post); // { id: 1234, status: 'published', ... }\n * });\n *\n * @fires Container#beforeUpdate\n * @fires Container#afterUpdate\n * @method Container#update\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {(string|number)} id See {@link Mapper#update}.\n * @param {object} record See {@link Mapper#update}.\n * @param {object} [opts] See {@link Mapper#update}.\n * @returns {Promise} See {@link Mapper#update}.\n * @see Mapper#update\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n */\n'update',\n\n/**\n * Fired during {@link Container#updateAll}. See\n * {@link Container~beforeUpdateAllListener} for how to listen for this event.\n *\n * @event Container#beforeUpdateAll\n * @see Container~beforeUpdateAllListener\n * @see Container#updateAll\n */\n/**\n * Callback signature for the {@link Container#event:beforeUpdateAll} event.\n *\n * @example\n * function onBeforeUpdateAll (mapperName, props, query, opts) {\n *   // do something\n * }\n * store.on('beforeUpdateAll', onBeforeUpdateAll);\n *\n * @callback Container~beforeUpdateAllListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n * @see Container#event:beforeUpdateAll\n * @see Container#updateAll\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#updateAll}. See\n * {@link Container~afterUpdateAllListener} for how to listen for this event.\n *\n * @event Container#afterUpdateAll\n * @see Container~afterUpdateAllListener\n * @see Container#updateAll\n */\n/**\n * Callback signature for the {@link Container#event:afterUpdateAll} event.\n *\n * @example\n * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n *   // do something\n * }\n * store.on('afterUpdateAll', onAfterUpdateAll);\n *\n * @callback Container~afterUpdateAllListener\n * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n * @see Container#event:afterUpdateAll\n * @see Container#updateAll\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#updateAll}.\n *\n * @example\n * // Turn all of John's blog posts into drafts.\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * const update = { status: draft: published_at: null };\n * const query = { userId: 1234 };\n * store.updateAll('post', update, query).then((posts) => {\n *   console.log(posts); // [...]\n * });\n *\n * @fires Container#beforeUpdateAll\n * @fires Container#afterUpdateAll\n * @method Container#updateAll\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {object} update See {@link Mapper#updateAll}.\n * @param {object} [query] See {@link Mapper#updateAll}.\n * @param {object} [opts] See {@link Mapper#updateAll}.\n * @returns {Promise} See {@link Mapper#updateAll}.\n * @see Mapper#updateAll\n * @since 3.0.0\n */\n'updateAll',\n\n/**\n * Fired during {@link Container#updateMany}. See\n * {@link Container~beforeUpdateManyListener} for how to listen for this event.\n *\n * @event Container#beforeUpdateMany\n * @see Container~beforeUpdateManyListener\n * @see Container#updateMany\n */\n/**\n * Callback signature for the {@link Container#event:beforeUpdateMany} event.\n *\n * @example\n * function onBeforeUpdateMany (mapperName, records, opts) {\n *   // do something\n * }\n * store.on('beforeUpdateMany', onBeforeUpdateMany);\n *\n * @callback Container~beforeUpdateManyListener\n * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n * @see Container#event:beforeUpdateMany\n * @see Container#updateMany\n * @since 3.0.0\n */\n/**\n * Fired during {@link Container#updateMany}. See\n * {@link Container~afterUpdateManyListener} for how to listen for this event.\n *\n * @event Container#afterUpdateMany\n * @see Container~afterUpdateManyListener\n * @see Container#updateMany\n */\n/**\n * Callback signature for the {@link Container#event:afterUpdateMany} event.\n *\n * @example\n * function onAfterUpdateMany (mapperName, records, opts, result) {\n *   // do something\n * }\n * store.on('afterUpdateMany', onAfterUpdateMany);\n *\n * @callback Container~afterUpdateManyListener\n * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n * @see Container#event:afterUpdateMany\n * @see Container#updateMany\n * @since 3.0.0\n */\n/**\n * Wrapper for {@link Mapper#updateMany}.\n *\n * @example\n * import { Container } from 'js-data';\n * import RethinkDBAdapter from 'js-data-rethinkdb';\n * const store = new Container();\n * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n * store.defineMapper('post');\n *\n * store.updateMany('post', [\n *   { id: 1234, status: 'draft' },\n *   { id: 2468, status: 'published', published_at: new Date() }\n * ]).then((posts) => {\n *   console.log(posts); // [...]\n * });\n *\n * @fires Container#beforeUpdateMany\n * @fires Container#afterUpdateMany\n * @method Container#updateMany\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {(Object[]|Record[])} records See {@link Mapper#updateMany}.\n * @param {object} [opts] See {@link Mapper#updateMany}.\n * @returns {Promise} See {@link Mapper#updateMany}.\n * @see Mapper#updateMany\n * @since 3.0.0\n */\n'updateMany',\n\n/**\n * Wrapper for {@link Mapper#validate}.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('post', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' },\n *       id: { type: 'string' }\n *     }\n *   }\n * });\n * let errors = store.validate('post', { name: 'John' });\n * console.log(errors); // undefined\n * errors = store.validate('post', { name: 123 });\n * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n *\n * @method Container#validate\n * @param {string} name Name of the {@link Mapper} to target.\n * @param {(Object[]|Record[])} records See {@link Mapper#validate}.\n * @param {object} [opts] See {@link Mapper#validate}.\n * @returns {Promise} See {@link Mapper#validate}.\n * @see Mapper#validate\n * @since 3.0.0\n */\n'validate'];\n\n/**\n * The `Container` class is a place to define and store {@link Mapper} instances.\n *\n * `Container` makes it easy to manage your Mappers. Without a container, you\n * need to manage Mappers yourself, including resolving circular dependencies\n * among relations. All Mappers in a container share the same adapters, so you\n * don't have to register adapters for every single Mapper.\n *\n * @example <caption>Container#constructor</caption>\n * // import { Container } from 'js-data';\n * const JSData = require('js-data');\n * const {Container} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n *\n * @class Container\n * @extends Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {Constructor} [opts.mapperClass] See {@link Container#mapperClass}.\n * @param {object} [opts.mapperDefaults] See {@link Container#mapperDefaults}.\n * @since 3.0.0\n */\nfunction Container(opts) {\n  _utils2.default.classCallCheck(this, Container);\n  _Component2.default.call(this);\n  opts || (opts = {});\n\n  Object.defineProperties(this, {\n    /**\n     * The adapters registered with this Container, which are also shared by all\n     * Mappers in this Container.\n     *\n     * @name Container#_adapters\n     * @see Container#registerAdapter\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _adapters: {\n      value: {}\n    },\n\n    /**\n     * The the mappers in this container\n     *\n     * @name Container#_mappers\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _mappers: {\n      value: {}\n    },\n\n    /**\n     * Constructor function to use in {@link Container#defineMapper} to create new\n     * {@link Mapper} instances. {@link Container#mapperClass} should extend\n     * {@link Mapper}. By default {@link Mapper} is used to instantiate Mappers.\n     *\n     * @example <caption>Container#mapperClass</caption>\n     * // import { Container, Mapper } from 'js-data';\n     * const JSData = require('js-data');\n     * const { Container, Mapper } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * class MyMapperClass extends Mapper {\n     *   foo () { return 'bar' }\n     * }\n     * const store = new Container({\n     *   mapperClass: MyMapperClass\n     * });\n     * store.defineMapper('user');\n     * console.log(store.getMapper('user').foo());\n     *\n     * @name Container#mapperClass\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Constructor}\n     */\n    mapperClass: {\n      value: undefined,\n      writable: true\n    }\n  });\n\n  // Apply options provided by the user\n  _utils2.default.fillIn(this, opts);\n\n  /**\n   * Defaults options to pass to {@link Container#mapperClass} when creating a\n   * new {@link Mapper}.\n   *\n   * @example <caption>Container#mapperDefaults</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: {\n   *     idAttribute: '_id'\n   *   }\n   * });\n   * store.defineMapper('user');\n   * console.log(store.getMapper('user').idAttribute);\n   *\n   * @default {}\n   * @name Container#mapperDefaults\n   * @since 3.0.0\n   * @type {Object}\n   */\n  this.mapperDefaults = this.mapperDefaults || {};\n\n  // Use the Mapper class if the user didn't provide a mapperClass\n  this.mapperClass || (this.mapperClass = _Mapper2.default);\n}\n\nconst props = {\n  constructor: Container,\n\n  /**\n   * Register a new event listener on this Container.\n   *\n   * Proxy for {@link Component#on}. If an event was emitted by a {@link Mapper}\n   * in the Container, then the name of the {@link Mapper} will be prepended to\n   * the arugments passed to the listener.\n   *\n   * @example <caption>Container#on</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.on('foo', function (...args) { console.log(args.join(':')) });\n   * store.defineMapper('user');\n   * store.emit('foo', 'arg1', 'arg2');\n   * store.getMapper('user').emit('foo', 'arg1', 'arg2');\n   *\n   * @method Container#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n\n  /**\n   * Used to bind to events emitted by mappers in this container.\n   *\n   * @method Container#_onMapperEvent\n   * @param {string} name Name of the mapper that emitted the event.\n   * @param {...*} [args] Args See {@link Mapper#emit}.\n   * @private\n   * @since 3.0.0\n   */\n  _onMapperEvent(name, ...args) {\n    const type = args.shift();\n    this.emit(type, name, ...args);\n  },\n\n  /**\n   * Return a container scoped to a particular mapper.\n   *\n   * @example <caption>Container#as</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method Container#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} A container scoped to a particular mapper.\n   * @since 3.0.0\n   */\n  as(name) {\n    const props = {};\n    const original = this;\n    proxiedMapperMethods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value(...args) {\n          return original[method](name, ...args);\n        }\n      };\n    });\n    props.getMapper = {\n      writable: true,\n      value() {\n        return original.getMapper(name);\n      }\n    };\n    return Object.create(this, props);\n  },\n\n  /**\n   * Create a new mapper and register it in this container.\n   *\n   * @example <caption>Container#defineMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: { foo: 'bar' }\n   * });\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(UserMapper.foo);\n   *\n   * @method Container#defineMapper\n   * @param {string} name Name under which to register the new {@link Mapper}.\n   * {@link Mapper#name} will be set to this value.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Container#mapperClass} when creating the new {@link Mapper}.\n   * @returns {Mapper} The newly created instance of {@link Mapper}.\n   * @see Container#as\n   * @since 3.0.0\n   */\n  defineMapper(name, opts) {\n    // For backwards compatibility with defineResource\n    if (_utils2.default.isObject(name)) {\n      opts = name;\n      name = opts.name;\n    }\n    if (!_utils2.default.isString(name)) {\n      throw _utils2.default.err(`${DOMAIN}#defineMapper`, 'name')(400, 'string', name);\n    }\n\n    // Default values for arguments\n    opts || (opts = {});\n    // Set Mapper#name\n    opts.name = name;\n    opts.relations || (opts.relations = {});\n\n    // Check if the user is overriding the datastore's default mapperClass\n    const mapperClass = opts.mapperClass || this.mapperClass;\n    delete opts.mapperClass;\n\n    // Apply the datastore's defaults to the options going into the mapper\n    _utils2.default.fillIn(opts, this.mapperDefaults);\n\n    // Instantiate a mapper\n    const mapper = this._mappers[name] = new mapperClass(opts); // eslint-disable-line\n    mapper.relations || (mapper.relations = {});\n    // Make sure the mapper's name is set\n    mapper.name = name;\n    // All mappers in this datastore will share adapters\n    mapper._adapters = this.getAdapters();\n\n    mapper.datastore = this;\n\n    mapper.on('all', (...args) => this._onMapperEvent(name, ...args));\n    mapper.defineRelations();\n\n    return mapper;\n  },\n\n  defineResource(name, opts) {\n    console.warn('DEPRECATED: defineResource is deprecated, use defineMapper instead');\n    return this.defineMapper(name, opts);\n  },\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Container#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   */\n  getAdapter(name) {\n    const adapter = this.getAdapterName(name);\n    if (!adapter) {\n      throw _utils2.default.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name);\n    }\n    return this.getAdapters()[adapter];\n  },\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Container#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   */\n  getAdapterName(opts) {\n    opts || (opts = {});\n    if (_utils2.default.isString(opts)) {\n      opts = { adapter: opts };\n    }\n    return opts.adapter || this.mapperDefaults.defaultAdapter;\n  },\n\n  /**\n   * Return the registered adapters of this container.\n   *\n   * @method Container#getAdapters\n   * @returns {Adapter}\n   * @since 3.0.0\n   */\n  getAdapters() {\n    return this._adapters;\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   *\n   * @example <caption>Container#getMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * store.getMapper('profile'); // throws Error, there is no mapper with name \"profile\"\n   *\n   * @method Container#getMapper\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapper(name) {\n    const mapper = this.getMapperByName(name);\n    if (!mapper) {\n      throw _utils2.default.err(`${DOMAIN}#getMapper`, name)(404, 'mapper');\n    }\n    return mapper;\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   * Doesn't throw error if mapper doesn't exist.\n   *\n   * @example <caption>Container#getMapperByName</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(store.getMapper('profile')); // Does NOT throw an error\n   *\n   * @method Container#getMapperByName\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapperByName(name) {\n    return this._mappers[name];\n  },\n\n  /**\n   * Register an adapter on this container under the given name. Adapters\n   * registered on a container are shared by all mappers in the container.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   *\n   * @method Container#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for all Mappers in this container.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter(name, adapter, opts) {\n    opts || (opts = {});\n    this.getAdapters()[name] = adapter;\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.mapperDefaults.defaultAdapter = name;\n      _utils2.default.forOwn(this._mappers, function (mapper) {\n        mapper.defaultAdapter = name;\n      });\n    }\n  }\n};\n\nproxiedMapperMethods.forEach(function (method) {\n  props[method] = function (name, ...args) {\n    return this.getMapper(name)[method](...args);\n  };\n});\n\n_Component2.default.extend(props);\n\n/**\n * Create a subclass of this Container:\n * @example <caption>Container.extend</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomContainerClass extends Container {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customContainer = new CustomContainerClass();\n * console.log(customContainer.foo());\n * console.log(CustomContainerClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherContainerClass = Container.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherContainer = new OtherContainerClass();\n * console.log(otherContainer.foo());\n * console.log(OtherContainerClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherContainerClass () {\n *   Container.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Container.extend({\n *   constructor: AnotherContainerClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherContainer = new AnotherContainerClass();\n * console.log(anotherContainer.created_at);\n * console.log(anotherContainer.foo());\n * console.log(AnotherContainerClass.beep());\n *\n * @method Container.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Container class.\n * @since 3.0.0\n */","map":{"mappings":[{"name":"Container","generated":{"line":7,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":16}},{"name":"Container","generated":{"line":7,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":16}},{"generated":{"line":9,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":3,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":5,"column":0}},{"name":"DOMAIN","generated":{"line":23,"column":6},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":5,"column":6}},{"generated":{"line":23,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":5,"column":15}},{"generated":{"line":23,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":5,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":7}},{"name":"proxiedMapperMethods","generated":{"line":25,"column":6},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":13}},{"generated":{"line":25,"column":60},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":26,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":8,"column":2}},{"generated":{"line":49,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":31,"column":2}},{"generated":{"line":49,"column":7},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":51,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":33,"column":2}},{"generated":{"line":59,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":41,"column":2}},{"generated":{"line":76,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":58,"column":2}},{"generated":{"line":84,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":66,"column":2}},{"generated":{"line":102,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":84,"column":2}},{"generated":{"line":130,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":112,"column":2}},{"generated":{"line":130,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":132,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":114,"column":2}},{"generated":{"line":140,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":122,"column":2}},{"generated":{"line":157,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":139,"column":2}},{"generated":{"line":165,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":147,"column":2}},{"generated":{"line":183,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":165,"column":2}},{"generated":{"line":215,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":197,"column":2}},{"generated":{"line":215,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":217,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":199,"column":2}},{"generated":{"line":238,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":220,"column":2}},{"generated":{"line":238,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":240,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":222,"column":2}},{"generated":{"line":248,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":230,"column":2}},{"generated":{"line":265,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":247,"column":2}},{"generated":{"line":273,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":255,"column":2}},{"generated":{"line":291,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":273,"column":2}},{"generated":{"line":316,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":298,"column":2}},{"generated":{"line":316,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":318,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":300,"column":2}},{"generated":{"line":326,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":308,"column":2}},{"generated":{"line":343,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":325,"column":2}},{"generated":{"line":351,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":333,"column":2}},{"generated":{"line":369,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":351,"column":2}},{"generated":{"line":394,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":376,"column":2}},{"generated":{"line":394,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":396,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":378,"column":2}},{"generated":{"line":404,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":386,"column":2}},{"generated":{"line":421,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":403,"column":2}},{"generated":{"line":429,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":411,"column":2}},{"generated":{"line":447,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":429,"column":2}},{"generated":{"line":471,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":453,"column":2}},{"generated":{"line":471,"column":6},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":473,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":455,"column":2}},{"generated":{"line":481,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":463,"column":2}},{"generated":{"line":498,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":480,"column":2}},{"generated":{"line":506,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":488,"column":2}},{"generated":{"line":524,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":506,"column":2}},{"generated":{"line":549,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":531,"column":2}},{"generated":{"line":549,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":551,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":533,"column":2}},{"generated":{"line":560,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":542,"column":2}},{"generated":{"line":560,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":562,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":544,"column":2}},{"generated":{"line":582,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":564,"column":2}},{"generated":{"line":582,"column":4},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":584,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":566,"column":2}},{"generated":{"line":607,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":589,"column":2}},{"generated":{"line":607,"column":5},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":609,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":591,"column":2}},{"generated":{"line":650,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":632,"column":2}},{"generated":{"line":650,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":652,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":634,"column":2}},{"generated":{"line":660,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":642,"column":2}},{"generated":{"line":678,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":660,"column":2}},{"generated":{"line":686,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":668,"column":2}},{"generated":{"line":705,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":687,"column":2}},{"generated":{"line":734,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":716,"column":2}},{"generated":{"line":734,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":736,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":718,"column":2}},{"generated":{"line":744,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":726,"column":2}},{"generated":{"line":762,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":744,"column":2}},{"generated":{"line":770,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":752,"column":2}},{"generated":{"line":789,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":771,"column":2}},{"generated":{"line":817,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":799,"column":2}},{"generated":{"line":817,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":819,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":801,"column":2}},{"generated":{"line":827,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":809,"column":2}},{"generated":{"line":844,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":826,"column":2}},{"generated":{"line":852,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":834,"column":2}},{"generated":{"line":870,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":852,"column":2}},{"generated":{"line":897,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":879,"column":2}},{"generated":{"line":897,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":899,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":881,"column":2}},{"generated":{"line":926,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":908,"column":2}},{"generated":{"line":926,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":36}},{"generated":{"line":926,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":7,"column":7}},{"generated":{"line":928,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":911,"column":0}},{"generated":{"line":952,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":7}},{"name":"Container","generated":{"line":952,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":16}},{"generated":{"line":952,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":7}},{"name":"opts","generated":{"line":952,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":27}},{"generated":{"line":952,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":7}},{"generated":{"line":952,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":935,"column":33}},{"name":"utils","generated":{"line":953,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":2}},{"name":"classCallCheck","generated":{"line":953,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":8}},{"generated":{"line":953,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":2}},{"generated":{"line":953,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":23}},{"generated":{"line":953,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":2}},{"name":"Container","generated":{"line":953,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":29}},{"generated":{"line":953,"column":48},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":936,"column":2}},{"name":"Component","generated":{"line":954,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":937,"column":2}},{"name":"call","generated":{"line":954,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":937,"column":12}},{"generated":{"line":954,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":937,"column":2}},{"generated":{"line":954,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":937,"column":17}},{"generated":{"line":954,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":937,"column":2}},{"name":"opts","generated":{"line":955,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":938,"column":2}},{"name":"opts","generated":{"line":955,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":938,"column":11}},{"generated":{"line":955,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":938,"column":18}},{"generated":{"line":955,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":938,"column":2}},{"name":"Object","generated":{"line":957,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":2}},{"name":"defineProperties","generated":{"line":957,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":9}},{"generated":{"line":957,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":2}},{"generated":{"line":957,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":26}},{"generated":{"line":957,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":2}},{"generated":{"line":957,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":32}},{"generated":{"line":958,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":941,"column":4}},{"name":"_adapters","generated":{"line":967,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":950,"column":4}},{"generated":{"line":967,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":950,"column":15}},{"name":"value","generated":{"line":968,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":951,"column":6}},{"generated":{"line":968,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":951,"column":13}},{"generated":{"line":969,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":950,"column":15}},{"generated":{"line":969,"column":5},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":32}},{"generated":{"line":971,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":954,"column":4}},{"name":"_mappers","generated":{"line":979,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":962,"column":4}},{"generated":{"line":979,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":962,"column":14}},{"name":"value","generated":{"line":980,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":963,"column":6}},{"generated":{"line":980,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":963,"column":13}},{"generated":{"line":981,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":962,"column":14}},{"generated":{"line":981,"column":5},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":32}},{"generated":{"line":983,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":966,"column":4}},{"name":"mapperClass","generated":{"line":1008,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":991,"column":4}},{"generated":{"line":1008,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":991,"column":17}},{"name":"value","generated":{"line":1009,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":992,"column":6}},{"name":"undefined","generated":{"line":1009,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":992,"column":13}},{"generated":{"line":1009,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":991,"column":17}},{"name":"writable","generated":{"line":1010,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":993,"column":6}},{"generated":{"line":1010,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":993,"column":16}},{"generated":{"line":1011,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":991,"column":17}},{"generated":{"line":1012,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":32}},{"generated":{"line":1012,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":940,"column":2}},{"generated":{"line":1014,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":997,"column":2}},{"name":"utils","generated":{"line":1015,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":2}},{"name":"fillIn","generated":{"line":1015,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":8}},{"generated":{"line":1015,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":2}},{"generated":{"line":1015,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":15}},{"generated":{"line":1015,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":2}},{"name":"opts","generated":{"line":1015,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":21}},{"generated":{"line":1015,"column":35},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":998,"column":2}},{"generated":{"line":1017,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1000,"column":2}},{"generated":{"line":1040,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":2}},{"name":"mapperDefaults","generated":{"line":1040,"column":7},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":7}},{"generated":{"line":1040,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":2}},{"generated":{"line":1040,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":24}},{"name":"mapperDefaults","generated":{"line":1040,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":29}},{"generated":{"line":1040,"column":43},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":24}},{"generated":{"line":1040,"column":47},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":47}},{"generated":{"line":1040,"column":49},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1023,"column":2}},{"generated":{"line":1042,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1025,"column":2}},{"generated":{"line":1043,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":2}},{"name":"mapperClass","generated":{"line":1043,"column":7},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":7}},{"generated":{"line":1043,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":2}},{"generated":{"line":1043,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":23}},{"name":"mapperClass","generated":{"line":1043,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":28}},{"generated":{"line":1043,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":23}},{"name":"Mapper","generated":{"line":1043,"column":42},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":42}},{"generated":{"line":1043,"column":58},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1026,"column":2}},{"generated":{"line":1044,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1027,"column":1}},{"generated":{"line":1046,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":0}},{"name":"props","generated":{"line":1046,"column":6},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":6}},{"generated":{"line":1046,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"name":"constructor","generated":{"line":1047,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1030,"column":2}},{"name":"Container","generated":{"line":1047,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1030,"column":15}},{"generated":{"line":1047,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1049,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1032,"column":2}},{"generated":{"line":1075,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1058,"column":2}},{"name":"_onMapperEvent","generated":{"line":1084,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":2}},{"name":"name","generated":{"line":1084,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":18}},{"generated":{"line":1084,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":2}},{"generated":{"line":1084,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":24}},{"name":"args","generated":{"line":1084,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":27}},{"generated":{"line":1084,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":2}},{"generated":{"line":1084,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1067,"column":33}},{"generated":{"line":1085,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1068,"column":4}},{"name":"type","generated":{"line":1085,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1068,"column":10}},{"name":"args","generated":{"line":1085,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1068,"column":17}},{"name":"shift","generated":{"line":1085,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1068,"column":22}},{"generated":{"line":1085,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1068,"column":17}},{"generated":{"line":1085,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1068,"column":4}},{"generated":{"line":1086,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":4}},{"name":"emit","generated":{"line":1086,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":9}},{"generated":{"line":1086,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":4}},{"name":"type","generated":{"line":1086,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":14}},{"generated":{"line":1086,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":4}},{"name":"name","generated":{"line":1086,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":20}},{"generated":{"line":1086,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":4}},{"generated":{"line":1086,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":26}},{"name":"args","generated":{"line":1086,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":29}},{"generated":{"line":1086,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1069,"column":4}},{"generated":{"line":1087,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1070,"column":3}},{"generated":{"line":1087,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1089,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1072,"column":2}},{"name":"as","generated":{"line":1114,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1097,"column":2}},{"name":"name","generated":{"line":1114,"column":5},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1097,"column":6}},{"generated":{"line":1114,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1097,"column":2}},{"generated":{"line":1114,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1097,"column":12}},{"generated":{"line":1115,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1098,"column":4}},{"name":"props","generated":{"line":1115,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1098,"column":10}},{"generated":{"line":1115,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1098,"column":18}},{"generated":{"line":1115,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1098,"column":4}},{"generated":{"line":1116,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1099,"column":4}},{"name":"original","generated":{"line":1116,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1099,"column":10}},{"generated":{"line":1116,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1099,"column":21}},{"generated":{"line":1116,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1099,"column":4}},{"name":"proxiedMapperMethods","generated":{"line":1117,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":4}},{"name":"forEach","generated":{"line":1117,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":25}},{"generated":{"line":1117,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":4}},{"generated":{"line":1117,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":33}},{"name":"method","generated":{"line":1117,"column":43},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":43}},{"generated":{"line":1117,"column":49},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":33}},{"generated":{"line":1117,"column":51},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":51}},{"name":"props","generated":{"line":1118,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":6}},{"name":"method","generated":{"line":1118,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":12}},{"generated":{"line":1118,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":6}},{"generated":{"line":1118,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":22}},{"name":"writable","generated":{"line":1119,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1102,"column":8}},{"generated":{"line":1119,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1102,"column":18}},{"generated":{"line":1119,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":22}},{"name":"value","generated":{"line":1120,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1103,"column":8}},{"generated":{"line":1120,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1103,"column":15}},{"name":"args","generated":{"line":1120,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1103,"column":18}},{"generated":{"line":1120,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1103,"column":8}},{"generated":{"line":1120,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1103,"column":24}},{"generated":{"line":1121,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":10}},{"name":"original","generated":{"line":1121,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":17}},{"name":"method","generated":{"line":1121,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":26}},{"generated":{"line":1121,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":17}},{"name":"name","generated":{"line":1121,"column":34},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":34}},{"generated":{"line":1121,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":17}},{"generated":{"line":1121,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":40}},{"name":"args","generated":{"line":1121,"column":43},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":43}},{"generated":{"line":1121,"column":47},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":17}},{"generated":{"line":1121,"column":48},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1104,"column":10}},{"generated":{"line":1122,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1105,"column":9}},{"generated":{"line":1123,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":22}},{"generated":{"line":1123,"column":7},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1101,"column":6}},{"generated":{"line":1124,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1107,"column":5}},{"generated":{"line":1124,"column":5},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1100,"column":4}},{"name":"props","generated":{"line":1125,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":4}},{"name":"getMapper","generated":{"line":1125,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":10}},{"generated":{"line":1125,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":4}},{"generated":{"line":1125,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":22}},{"name":"writable","generated":{"line":1126,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1109,"column":6}},{"generated":{"line":1126,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1109,"column":16}},{"generated":{"line":1126,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":22}},{"name":"value","generated":{"line":1127,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1110,"column":6}},{"generated":{"line":1127,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1110,"column":15}},{"generated":{"line":1128,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":8}},{"name":"original","generated":{"line":1128,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":15}},{"name":"getMapper","generated":{"line":1128,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":24}},{"generated":{"line":1128,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":15}},{"name":"name","generated":{"line":1128,"column":34},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":34}},{"generated":{"line":1128,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":15}},{"generated":{"line":1128,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1111,"column":8}},{"generated":{"line":1129,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1112,"column":7}},{"generated":{"line":1130,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":22}},{"generated":{"line":1130,"column":5},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1108,"column":4}},{"generated":{"line":1131,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":4}},{"name":"Object","generated":{"line":1131,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":11}},{"name":"create","generated":{"line":1131,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":18}},{"generated":{"line":1131,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":11}},{"generated":{"line":1131,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":25}},{"generated":{"line":1131,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":11}},{"name":"props","generated":{"line":1131,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":31}},{"generated":{"line":1131,"column":36},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":11}},{"generated":{"line":1131,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1114,"column":4}},{"generated":{"line":1132,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1115,"column":3}},{"generated":{"line":1132,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1134,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1117,"column":2}},{"name":"defineMapper","generated":{"line":1162,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":2}},{"name":"name","generated":{"line":1162,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":16}},{"generated":{"line":1162,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":2}},{"name":"opts","generated":{"line":1162,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":22}},{"generated":{"line":1162,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":2}},{"generated":{"line":1162,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":28}},{"generated":{"line":1163,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1146,"column":4}},{"generated":{"line":1164,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":4}},{"name":"utils","generated":{"line":1164,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":8}},{"name":"isObject","generated":{"line":1164,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":14}},{"generated":{"line":1164,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":8}},{"name":"name","generated":{"line":1164,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":23}},{"generated":{"line":1164,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":8}},{"generated":{"line":1164,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":4}},{"generated":{"line":1164,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1147,"column":30}},{"name":"opts","generated":{"line":1165,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1148,"column":6}},{"name":"name","generated":{"line":1165,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1148,"column":13}},{"generated":{"line":1165,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1148,"column":6}},{"name":"name","generated":{"line":1166,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1149,"column":6}},{"name":"opts","generated":{"line":1166,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1149,"column":13}},{"name":"name","generated":{"line":1166,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1149,"column":18}},{"generated":{"line":1166,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1149,"column":6}},{"generated":{"line":1167,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1150,"column":5}},{"generated":{"line":1168,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":4}},{"generated":{"line":1168,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":8}},{"name":"utils","generated":{"line":1168,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":9}},{"name":"isString","generated":{"line":1168,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":15}},{"generated":{"line":1168,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":9}},{"name":"name","generated":{"line":1168,"column":34},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":24}},{"generated":{"line":1168,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":9}},{"generated":{"line":1168,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":4}},{"generated":{"line":1168,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1151,"column":31}},{"generated":{"line":1169,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":6}},{"name":"utils","generated":{"line":1169,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"name":"err","generated":{"line":1169,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":18}},{"generated":{"line":1169,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"generated":{"line":1169,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":23}},{"name":"DOMAIN","generated":{"line":1169,"column":35},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":25}},{"generated":{"line":1169,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":32}},{"generated":{"line":1169,"column":56},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"generated":{"line":1169,"column":58},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":48}},{"generated":{"line":1169,"column":64},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"generated":{"line":1169,"column":66},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":56}},{"generated":{"line":1169,"column":69},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"generated":{"line":1169,"column":71},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":61}},{"generated":{"line":1169,"column":79},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"name":"name","generated":{"line":1169,"column":81},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":71}},{"generated":{"line":1169,"column":85},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":12}},{"generated":{"line":1169,"column":86},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1152,"column":6}},{"generated":{"line":1170,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1153,"column":5}},{"generated":{"line":1172,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1155,"column":4}},{"name":"opts","generated":{"line":1173,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1156,"column":4}},{"name":"opts","generated":{"line":1173,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1156,"column":13}},{"generated":{"line":1173,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1156,"column":20}},{"generated":{"line":1173,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1156,"column":4}},{"generated":{"line":1174,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1157,"column":4}},{"name":"opts","generated":{"line":1175,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1158,"column":4}},{"name":"name","generated":{"line":1175,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1158,"column":9}},{"generated":{"line":1175,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1158,"column":4}},{"name":"name","generated":{"line":1175,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1158,"column":16}},{"generated":{"line":1175,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1158,"column":4}},{"name":"opts","generated":{"line":1176,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":4}},{"name":"relations","generated":{"line":1176,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":9}},{"generated":{"line":1176,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":4}},{"name":"opts","generated":{"line":1176,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":23}},{"name":"relations","generated":{"line":1176,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":28}},{"generated":{"line":1176,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":23}},{"generated":{"line":1176,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":40}},{"generated":{"line":1176,"column":42},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1159,"column":4}},{"generated":{"line":1178,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1161,"column":4}},{"generated":{"line":1179,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":4}},{"name":"mapperClass","generated":{"line":1179,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":10}},{"name":"opts","generated":{"line":1179,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":24}},{"name":"mapperClass","generated":{"line":1179,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":29}},{"generated":{"line":1179,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":24}},{"generated":{"line":1179,"column":44},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":44}},{"name":"mapperClass","generated":{"line":1179,"column":49},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":49}},{"generated":{"line":1179,"column":60},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1162,"column":4}},{"generated":{"line":1180,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1163,"column":4}},{"name":"opts","generated":{"line":1180,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1163,"column":11}},{"name":"mapperClass","generated":{"line":1180,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1163,"column":16}},{"generated":{"line":1180,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1163,"column":4}},{"generated":{"line":1182,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1165,"column":4}},{"name":"utils","generated":{"line":1183,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":4}},{"name":"fillIn","generated":{"line":1183,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":10}},{"generated":{"line":1183,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":4}},{"name":"opts","generated":{"line":1183,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":17}},{"generated":{"line":1183,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":4}},{"generated":{"line":1183,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":23}},{"name":"mapperDefaults","generated":{"line":1183,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":28}},{"generated":{"line":1183,"column":52},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1166,"column":4}},{"generated":{"line":1185,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1168,"column":4}},{"generated":{"line":1186,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":4}},{"name":"mapper","generated":{"line":1186,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":10}},{"generated":{"line":1186,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":19}},{"name":"_mappers","generated":{"line":1186,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":24}},{"generated":{"line":1186,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":19}},{"name":"name","generated":{"line":1186,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":33}},{"generated":{"line":1186,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":19}},{"generated":{"line":1186,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":41}},{"name":"mapperClass","generated":{"line":1186,"column":45},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":45}},{"generated":{"line":1186,"column":56},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":41}},{"name":"opts","generated":{"line":1186,"column":57},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":57}},{"generated":{"line":1186,"column":61},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":41}},{"generated":{"line":1186,"column":62},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":4}},{"generated":{"line":1186,"column":63},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1145,"column":28}},{"generated":{"line":1186,"column":64},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1169,"column":63}},{"name":"mapper","generated":{"line":1187,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":4}},{"name":"relations","generated":{"line":1187,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":11}},{"generated":{"line":1187,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":4}},{"name":"mapper","generated":{"line":1187,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":25}},{"name":"relations","generated":{"line":1187,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":32}},{"generated":{"line":1187,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":25}},{"generated":{"line":1187,"column":44},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":44}},{"generated":{"line":1187,"column":46},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1170,"column":4}},{"generated":{"line":1188,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1171,"column":4}},{"name":"mapper","generated":{"line":1189,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1172,"column":4}},{"name":"name","generated":{"line":1189,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1172,"column":11}},{"generated":{"line":1189,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1172,"column":4}},{"name":"name","generated":{"line":1189,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1172,"column":18}},{"generated":{"line":1189,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1172,"column":4}},{"generated":{"line":1190,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1173,"column":4}},{"name":"mapper","generated":{"line":1191,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":4}},{"name":"_adapters","generated":{"line":1191,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":11}},{"generated":{"line":1191,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":4}},{"generated":{"line":1191,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":23}},{"name":"getAdapters","generated":{"line":1191,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":28}},{"generated":{"line":1191,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":23}},{"generated":{"line":1191,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1174,"column":4}},{"name":"mapper","generated":{"line":1193,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1176,"column":4}},{"name":"datastore","generated":{"line":1193,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1176,"column":11}},{"generated":{"line":1193,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1176,"column":4}},{"generated":{"line":1193,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1176,"column":23}},{"generated":{"line":1193,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1176,"column":4}},{"name":"mapper","generated":{"line":1195,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":4}},{"name":"on","generated":{"line":1195,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":11}},{"generated":{"line":1195,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":4}},{"generated":{"line":1195,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":14}},{"generated":{"line":1195,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":4}},{"generated":{"line":1195,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":21}},{"generated":{"line":1195,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":22}},{"name":"args","generated":{"line":1195,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":25}},{"generated":{"line":1195,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":21}},{"generated":{"line":1195,"column":34},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":34}},{"name":"_onMapperEvent","generated":{"line":1195,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":39}},{"generated":{"line":1195,"column":53},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":34}},{"name":"name","generated":{"line":1195,"column":54},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":54}},{"generated":{"line":1195,"column":58},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":34}},{"generated":{"line":1195,"column":60},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":60}},{"name":"args","generated":{"line":1195,"column":63},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":63}},{"generated":{"line":1195,"column":67},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":34}},{"generated":{"line":1195,"column":68},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1178,"column":4}},{"name":"mapper","generated":{"line":1196,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1179,"column":4}},{"name":"defineRelations","generated":{"line":1196,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1179,"column":11}},{"generated":{"line":1196,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1179,"column":4}},{"generated":{"line":1198,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1181,"column":4}},{"name":"mapper","generated":{"line":1198,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1181,"column":11}},{"generated":{"line":1198,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1181,"column":4}},{"generated":{"line":1199,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1182,"column":3}},{"generated":{"line":1199,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"name":"defineResource","generated":{"line":1201,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1184,"column":2}},{"name":"name","generated":{"line":1201,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1184,"column":18}},{"generated":{"line":1201,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1184,"column":2}},{"name":"opts","generated":{"line":1201,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1184,"column":24}},{"generated":{"line":1201,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1184,"column":2}},{"generated":{"line":1201,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1184,"column":30}},{"name":"console","generated":{"line":1202,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1185,"column":4}},{"name":"warn","generated":{"line":1202,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1185,"column":12}},{"generated":{"line":1202,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1185,"column":4}},{"generated":{"line":1202,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1185,"column":17}},{"generated":{"line":1202,"column":85},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1185,"column":4}},{"generated":{"line":1203,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":4}},{"generated":{"line":1203,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":11}},{"name":"defineMapper","generated":{"line":1203,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":16}},{"generated":{"line":1203,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":11}},{"name":"name","generated":{"line":1203,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":29}},{"generated":{"line":1203,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":11}},{"name":"opts","generated":{"line":1203,"column":35},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":35}},{"generated":{"line":1203,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":11}},{"generated":{"line":1203,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1186,"column":4}},{"generated":{"line":1204,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1187,"column":3}},{"generated":{"line":1204,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1206,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1189,"column":2}},{"name":"getAdapter","generated":{"line":1215,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1198,"column":2}},{"name":"name","generated":{"line":1215,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1198,"column":14}},{"generated":{"line":1215,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1198,"column":2}},{"generated":{"line":1215,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1198,"column":20}},{"generated":{"line":1216,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":4}},{"name":"adapter","generated":{"line":1216,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":10}},{"generated":{"line":1216,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":20}},{"name":"getAdapterName","generated":{"line":1216,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":25}},{"generated":{"line":1216,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":20}},{"name":"name","generated":{"line":1216,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":40}},{"generated":{"line":1216,"column":44},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":20}},{"generated":{"line":1216,"column":45},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1199,"column":4}},{"generated":{"line":1217,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1200,"column":4}},{"generated":{"line":1217,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1200,"column":8}},{"name":"adapter","generated":{"line":1217,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1200,"column":9}},{"generated":{"line":1217,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1200,"column":4}},{"generated":{"line":1217,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1200,"column":18}},{"generated":{"line":1218,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":6}},{"name":"utils","generated":{"line":1218,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"name":"err","generated":{"line":1218,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":18}},{"generated":{"line":1218,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"generated":{"line":1218,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":23}},{"name":"DOMAIN","generated":{"line":1218,"column":35},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":25}},{"generated":{"line":1218,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":32}},{"generated":{"line":1218,"column":54},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"generated":{"line":1218,"column":56},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":46}},{"generated":{"line":1218,"column":62},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"generated":{"line":1218,"column":64},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":54}},{"generated":{"line":1218,"column":67},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"generated":{"line":1218,"column":69},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":59}},{"generated":{"line":1218,"column":77},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"name":"name","generated":{"line":1218,"column":79},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":69}},{"generated":{"line":1218,"column":83},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":12}},{"generated":{"line":1218,"column":84},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1201,"column":6}},{"generated":{"line":1219,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1202,"column":5}},{"generated":{"line":1220,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":4}},{"generated":{"line":1220,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":11}},{"name":"getAdapters","generated":{"line":1220,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":16}},{"generated":{"line":1220,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":11}},{"name":"adapter","generated":{"line":1220,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":30}},{"generated":{"line":1220,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":11}},{"generated":{"line":1220,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1203,"column":4}},{"generated":{"line":1221,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1204,"column":3}},{"generated":{"line":1221,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1223,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1206,"column":2}},{"name":"getAdapterName","generated":{"line":1232,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1215,"column":2}},{"name":"opts","generated":{"line":1232,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1215,"column":18}},{"generated":{"line":1232,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1215,"column":2}},{"generated":{"line":1232,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1215,"column":24}},{"name":"opts","generated":{"line":1233,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1216,"column":4}},{"name":"opts","generated":{"line":1233,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1216,"column":13}},{"generated":{"line":1233,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1216,"column":20}},{"generated":{"line":1233,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1216,"column":4}},{"generated":{"line":1234,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":4}},{"name":"utils","generated":{"line":1234,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":8}},{"name":"isString","generated":{"line":1234,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":14}},{"generated":{"line":1234,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":8}},{"name":"opts","generated":{"line":1234,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":23}},{"generated":{"line":1234,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":8}},{"generated":{"line":1234,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":4}},{"generated":{"line":1234,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1217,"column":30}},{"name":"opts","generated":{"line":1235,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1218,"column":6}},{"generated":{"line":1235,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1218,"column":13}},{"name":"adapter","generated":{"line":1235,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1218,"column":15}},{"name":"opts","generated":{"line":1235,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1218,"column":24}},{"generated":{"line":1235,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1218,"column":13}},{"generated":{"line":1235,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1218,"column":6}},{"generated":{"line":1236,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1219,"column":5}},{"generated":{"line":1237,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":4}},{"name":"opts","generated":{"line":1237,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":11}},{"name":"adapter","generated":{"line":1237,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":16}},{"generated":{"line":1237,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":11}},{"generated":{"line":1237,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":27}},{"name":"mapperDefaults","generated":{"line":1237,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":32}},{"generated":{"line":1237,"column":46},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":27}},{"name":"defaultAdapter","generated":{"line":1237,"column":47},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":47}},{"generated":{"line":1237,"column":61},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1220,"column":4}},{"generated":{"line":1238,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1221,"column":3}},{"generated":{"line":1238,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1240,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1223,"column":2}},{"name":"getAdapters","generated":{"line":1247,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1230,"column":2}},{"generated":{"line":1247,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1230,"column":17}},{"generated":{"line":1248,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1231,"column":4}},{"generated":{"line":1248,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1231,"column":11}},{"name":"_adapters","generated":{"line":1248,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1231,"column":16}},{"generated":{"line":1248,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1231,"column":4}},{"generated":{"line":1249,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1232,"column":3}},{"generated":{"line":1249,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1251,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1234,"column":2}},{"name":"getMapper","generated":{"line":1273,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1256,"column":2}},{"name":"name","generated":{"line":1273,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1256,"column":13}},{"generated":{"line":1273,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1256,"column":2}},{"generated":{"line":1273,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1256,"column":19}},{"generated":{"line":1274,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":4}},{"name":"mapper","generated":{"line":1274,"column":10},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":10}},{"generated":{"line":1274,"column":19},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":19}},{"name":"getMapperByName","generated":{"line":1274,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":24}},{"generated":{"line":1274,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":19}},{"name":"name","generated":{"line":1274,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":40}},{"generated":{"line":1274,"column":44},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":19}},{"generated":{"line":1274,"column":45},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1257,"column":4}},{"generated":{"line":1275,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1258,"column":4}},{"generated":{"line":1275,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1258,"column":8}},{"name":"mapper","generated":{"line":1275,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1258,"column":9}},{"generated":{"line":1275,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1258,"column":4}},{"generated":{"line":1275,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1258,"column":17}},{"generated":{"line":1276,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":6}},{"name":"utils","generated":{"line":1276,"column":12},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":12}},{"name":"err","generated":{"line":1276,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":18}},{"generated":{"line":1276,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":12}},{"generated":{"line":1276,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":23}},{"name":"DOMAIN","generated":{"line":1276,"column":35},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":25}},{"generated":{"line":1276,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":32}},{"generated":{"line":1276,"column":53},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":12}},{"name":"name","generated":{"line":1276,"column":55},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":45}},{"generated":{"line":1276,"column":59},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":12}},{"generated":{"line":1276,"column":61},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":51}},{"generated":{"line":1276,"column":64},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":12}},{"generated":{"line":1276,"column":66},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":56}},{"generated":{"line":1276,"column":74},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":12}},{"generated":{"line":1276,"column":75},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1259,"column":6}},{"generated":{"line":1277,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1260,"column":5}},{"generated":{"line":1278,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1261,"column":4}},{"name":"mapper","generated":{"line":1278,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1261,"column":11}},{"generated":{"line":1278,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1261,"column":4}},{"generated":{"line":1279,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1262,"column":3}},{"generated":{"line":1279,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1281,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1264,"column":2}},{"name":"getMapperByName","generated":{"line":1304,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1287,"column":2}},{"name":"name","generated":{"line":1304,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1287,"column":19}},{"generated":{"line":1304,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1287,"column":2}},{"generated":{"line":1304,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1287,"column":25}},{"generated":{"line":1305,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":4}},{"generated":{"line":1305,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":11}},{"name":"_mappers","generated":{"line":1305,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":16}},{"generated":{"line":1305,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":11}},{"name":"name","generated":{"line":1305,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":25}},{"generated":{"line":1305,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":11}},{"generated":{"line":1305,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1288,"column":4}},{"generated":{"line":1306,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1289,"column":3}},{"generated":{"line":1306,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1308,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1291,"column":2}},{"name":"registerAdapter","generated":{"line":1327,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":2}},{"name":"name","generated":{"line":1327,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":19}},{"generated":{"line":1327,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":2}},{"name":"adapter","generated":{"line":1327,"column":24},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":25}},{"generated":{"line":1327,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":2}},{"name":"opts","generated":{"line":1327,"column":33},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":34}},{"generated":{"line":1327,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":2}},{"generated":{"line":1327,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1310,"column":40}},{"name":"opts","generated":{"line":1328,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1311,"column":4}},{"name":"opts","generated":{"line":1328,"column":13},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1311,"column":13}},{"generated":{"line":1328,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1311,"column":20}},{"generated":{"line":1328,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1311,"column":4}},{"generated":{"line":1329,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":4}},{"name":"getAdapters","generated":{"line":1329,"column":9},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":9}},{"generated":{"line":1329,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":4}},{"name":"name","generated":{"line":1329,"column":23},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":23}},{"generated":{"line":1329,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":4}},{"name":"adapter","generated":{"line":1329,"column":31},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":31}},{"generated":{"line":1329,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1312,"column":4}},{"generated":{"line":1330,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1313,"column":4}},{"generated":{"line":1331,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":4}},{"name":"opts","generated":{"line":1331,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":8}},{"generated":{"line":1331,"column":17},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":17}},{"generated":{"line":1331,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":8}},{"name":"opts","generated":{"line":1331,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":25}},{"name":"default","generated":{"line":1331,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":30}},{"generated":{"line":1331,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":4}},{"generated":{"line":1331,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1314,"column":39}},{"generated":{"line":1332,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":6}},{"name":"mapperDefaults","generated":{"line":1332,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":11}},{"generated":{"line":1332,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":6}},{"name":"defaultAdapter","generated":{"line":1332,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":26}},{"generated":{"line":1332,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":6}},{"name":"name","generated":{"line":1332,"column":43},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":43}},{"generated":{"line":1332,"column":47},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1315,"column":6}},{"name":"utils","generated":{"line":1333,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":6}},{"name":"forOwn","generated":{"line":1333,"column":22},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":12}},{"generated":{"line":1333,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":6}},{"generated":{"line":1333,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":19}},{"name":"_mappers","generated":{"line":1333,"column":34},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":24}},{"generated":{"line":1333,"column":42},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":6}},{"generated":{"line":1333,"column":44},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":34}},{"name":"mapper","generated":{"line":1333,"column":54},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":44}},{"generated":{"line":1333,"column":60},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":34}},{"generated":{"line":1333,"column":62},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":52}},{"name":"mapper","generated":{"line":1334,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1317,"column":8}},{"name":"defaultAdapter","generated":{"line":1334,"column":15},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1317,"column":15}},{"generated":{"line":1334,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1317,"column":8}},{"name":"name","generated":{"line":1334,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1317,"column":32}},{"generated":{"line":1334,"column":36},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1317,"column":8}},{"generated":{"line":1335,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1318,"column":7}},{"generated":{"line":1335,"column":7},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1316,"column":6}},{"generated":{"line":1336,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1319,"column":5}},{"generated":{"line":1337,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1320,"column":3}},{"generated":{"line":1338,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":14}},{"generated":{"line":1338,"column":1},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1029,"column":0}},{"name":"proxiedMapperMethods","generated":{"line":1340,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":0}},{"name":"forEach","generated":{"line":1340,"column":21},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":21}},{"generated":{"line":1340,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":0}},{"generated":{"line":1340,"column":29},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":29}},{"name":"method","generated":{"line":1340,"column":39},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":39}},{"generated":{"line":1340,"column":45},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":29}},{"generated":{"line":1340,"column":47},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":47}},{"name":"props","generated":{"line":1341,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":2}},{"name":"method","generated":{"line":1341,"column":8},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":8}},{"generated":{"line":1341,"column":14},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":2}},{"generated":{"line":1341,"column":18},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":18}},{"name":"name","generated":{"line":1341,"column":28},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":28}},{"generated":{"line":1341,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":18}},{"generated":{"line":1341,"column":34},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":34}},{"name":"args","generated":{"line":1341,"column":37},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":37}},{"generated":{"line":1341,"column":41},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":18}},{"generated":{"line":1341,"column":43},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":43}},{"generated":{"line":1342,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":4}},{"generated":{"line":1342,"column":11},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":11}},{"name":"getMapper","generated":{"line":1342,"column":16},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":16}},{"generated":{"line":1342,"column":25},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":11}},{"name":"name","generated":{"line":1342,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":26}},{"generated":{"line":1342,"column":30},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":11}},{"name":"method","generated":{"line":1342,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":32}},{"generated":{"line":1342,"column":38},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":11}},{"generated":{"line":1342,"column":40},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":40}},{"name":"args","generated":{"line":1342,"column":43},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":43}},{"generated":{"line":1342,"column":47},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":11}},{"generated":{"line":1342,"column":48},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1325,"column":4}},{"generated":{"line":1343,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1326,"column":3}},{"generated":{"line":1343,"column":3},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1324,"column":2}},{"generated":{"line":1344,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1327,"column":1}},{"generated":{"line":1344,"column":1},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1323,"column":0}},{"name":"Component","generated":{"line":1346,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1329,"column":0}},{"name":"extend","generated":{"line":1346,"column":20},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1329,"column":10}},{"generated":{"line":1346,"column":26},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1329,"column":0}},{"name":"props","generated":{"line":1346,"column":27},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1329,"column":17}},{"generated":{"line":1346,"column":32},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1329,"column":0}},{"generated":{"line":1348,"column":0},"source":"node_modules/@therms/models/js-data/Container.js","original":{"line":1331,"column":0}}],"sources":{"node_modules/@therms/models/js-data/Container.js":"import utils from './utils'\nimport Component from './Component'\nimport Mapper from './Mapper'\n\nconst DOMAIN = 'Container'\n\nexport const proxiedMapperMethods = [\n  /**\n   * Wrapper for {@link Mapper#count}.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.count('post', { status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Container#count\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#count}.\n   * @param {object} [opts] See {@link Mapper#count}.\n   * @returns {Promise} See {@link Mapper#count}.\n   * @see Mapper#count\n   * @since 3.0.0\n   */\n  'count',\n\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreate\n   * @see Container~beforeCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Container~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see Container#event:beforeCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~afterCreateListener} for how to listen for this event.\n   *\n   * @event Container#afterCreate\n   * @see Container~afterCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Container~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see Container#event:afterCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}.\n   *\n   * @example\n   * // Create and save a new blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.create('post', {\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreate\n   * @fires Container#afterCreate\n   * @method Container#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} [opts] See {@link Mapper#create}.\n   * @returns {Promise} See {@link Mapper#create}.\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  'create',\n\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreateMany\n   * @see Container~beforeCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Container~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Container#event:beforeCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterCreateMany\n   * @see Container~afterCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Container~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Container#event:afterCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.createMany('post', [{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreateMany\n   * @fires Container#afterCreateMany\n   * @method Container#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record[]} records See {@link Mapper#createMany}.\n   * @param {object} [opts] See {@link Mapper#createMany}.\n   * @returns {Promise} See {@link Mapper#createMany}.\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  'createMany',\n\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = PostMapper.createRecord();\n   *\n   * @method Container#createRecord\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Object[]} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Promise} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  'createRecord',\n\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroy\n   * @see Container~beforeDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Container~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see Container#event:beforeDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroy\n   * @see Container~afterDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Container~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see Container#event:afterDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroy('post', 1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroy\n   * @fires Container#afterDestroy\n   * @method Container#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#destroy}.\n   * @param {object} [opts] See {@link Mapper#destroy}.\n   * @returns {Promise} See {@link Mapper#destroy}.\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  'destroy',\n\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroyAll\n   * @see Container~beforeDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Container~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see Container#event:beforeDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroyAll\n   * @see Container~afterDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Container~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see Container#event:afterDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}.\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroyAll('post', { status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroyAll\n   * @fires Container#afterDestroyAll\n   * @method Container#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#destroyAll}.\n   * @param {object} [opts] See {@link Mapper#destroyAll}.\n   * @returns {Promise} See {@link Mapper#destroyAll}.\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  'destroyAll',\n\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~beforeFindListener} for how to listen for this event.\n   *\n   * @event Container#beforeFind\n   * @see Container~beforeFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Container~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see Container#event:beforeFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~afterFindListener} for how to listen for this event.\n   *\n   * @event Container#afterFind\n   * @see Container~afterFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Container~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see Container#event:afterFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.find('post', 1).then((post) => {\n   *   console.log(post) // { id: 1, ...}\n   * });\n   *\n   * @fires Container#beforeFind\n   * @fires Container#afterFind\n   * @method Container#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#find}.\n   * @param {object} [opts] See {@link Mapper#find}.\n   * @returns {Promise} See {@link Mapper#find}.\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  'find',\n\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeFindAll\n   * @see Container~beforeFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Container~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see Container#event:beforeFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Container#afterFindAll\n   * @see Container~afterFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Container~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see Container#event:afterFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.findAll('post', { status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, ...}, ...]\n   * });\n   *\n   * @fires Container#beforeFindAll\n   * @fires Container#afterFindAll\n   * @method Container#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#findAll}.\n   * @param {object} [opts] See {@link Mapper#findAll}.\n   * @returns {Promise} See {@link Mapper#findAll}.\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  'findAll',\n\n  /**\n   * Wrapper for {@link Mapper#getSchema}.\n   *\n   * @method Container#getSchema\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @returns {Schema} See {@link Mapper#getSchema}.\n   * @see Mapper#getSchema\n   * @since 3.0.0\n   */\n  'getSchema',\n\n  /**\n   * Wrapper for {@link Mapper#is}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = store.createRecord();\n   *\n   * console.log(store.is('post', post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof store.getMapper('post').recordClass); // true\n   *\n   * @method Container#is\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Record} record See {@link Mapper#is}.\n   * @returns {boolean} See {@link Mapper#is}.\n   * @see Mapper#is\n   * @since 3.0.0\n   */\n  'is',\n\n  /**\n   * Wrapper for {@link Mapper#sum}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('purchase_order');\n   *\n   * store.sum('purchase_order', 'amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Container#sum\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {string} field See {@link Mapper#sum}.\n   * @param {object} [query] See {@link Mapper#sum}.\n   * @param {object} [opts] See {@link Mapper#sum}.\n   * @returns {Promise} See {@link Mapper#sum}.\n   * @see Mapper#sum\n   * @since 3.0.0\n   */\n  'sum',\n\n  /**\n   * Wrapper for {@link Mapper#toJSON}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('person', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = store.createRecord('person', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(store.toJSON('person', person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * store.defineMapper('personRelaxed', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = store.createRecord('personRelaxed', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(store.toJSON('personRelaxed', person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Container#toJSON\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record|Record[]} records See {@link Mapper#toJSON}.\n   * @param {object} [opts] See {@link Mapper#toJSON}.\n   * @returns {Object|Object[]} See {@link Mapper#toJSON}.\n   * @see Mapper#toJSON\n   * @since 3.0.0\n   */\n  'toJSON',\n\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdate\n   * @see Container~beforeUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Container~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see Container#event:beforeUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdate\n   * @see Container~afterUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Container~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see Container#event:afterUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.update('post', 1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Container#beforeUpdate\n   * @fires Container#afterUpdate\n   * @method Container#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#update}.\n   * @param {object} record See {@link Mapper#update}.\n   * @param {object} [opts] See {@link Mapper#update}.\n   * @returns {Promise} See {@link Mapper#update}.\n   * @see Mapper#update\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  'update',\n\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateAll\n   * @see Container~beforeUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Container~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Container#event:beforeUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateAll\n   * @see Container~afterUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Container~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Container#event:afterUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * store.updateAll('post', update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateAll\n   * @fires Container#afterUpdateAll\n   * @method Container#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} update See {@link Mapper#updateAll}.\n   * @param {object} [query] See {@link Mapper#updateAll}.\n   * @param {object} [opts] See {@link Mapper#updateAll}.\n   * @returns {Promise} See {@link Mapper#updateAll}.\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  'updateAll',\n\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateMany\n   * @see Container~beforeUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Container~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Container#event:beforeUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateMany\n   * @see Container~afterUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Container~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Container#event:afterUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.updateMany('post', [\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateMany\n   * @fires Container#afterUpdateMany\n   * @method Container#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#updateMany}.\n   * @param {object} [opts] See {@link Mapper#updateMany}.\n   * @returns {Promise} See {@link Mapper#updateMany}.\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  'updateMany',\n\n  /**\n   * Wrapper for {@link Mapper#validate}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * let errors = store.validate('post', { name: 'John' });\n   * console.log(errors); // undefined\n   * errors = store.validate('post', { name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Container#validate\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#validate}.\n   * @param {object} [opts] See {@link Mapper#validate}.\n   * @returns {Promise} See {@link Mapper#validate}.\n   * @see Mapper#validate\n   * @since 3.0.0\n   */\n  'validate'\n]\n\n/**\n * The `Container` class is a place to define and store {@link Mapper} instances.\n *\n * `Container` makes it easy to manage your Mappers. Without a container, you\n * need to manage Mappers yourself, including resolving circular dependencies\n * among relations. All Mappers in a container share the same adapters, so you\n * don't have to register adapters for every single Mapper.\n *\n * @example <caption>Container#constructor</caption>\n * // import { Container } from 'js-data';\n * const JSData = require('js-data');\n * const {Container} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n *\n * @class Container\n * @extends Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {Constructor} [opts.mapperClass] See {@link Container#mapperClass}.\n * @param {object} [opts.mapperDefaults] See {@link Container#mapperDefaults}.\n * @since 3.0.0\n */\nexport function Container (opts) {\n  utils.classCallCheck(this, Container)\n  Component.call(this)\n  opts || (opts = {})\n\n  Object.defineProperties(this, {\n    /**\n     * The adapters registered with this Container, which are also shared by all\n     * Mappers in this Container.\n     *\n     * @name Container#_adapters\n     * @see Container#registerAdapter\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _adapters: {\n      value: {}\n    },\n\n    /**\n     * The the mappers in this container\n     *\n     * @name Container#_mappers\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _mappers: {\n      value: {}\n    },\n\n    /**\n     * Constructor function to use in {@link Container#defineMapper} to create new\n     * {@link Mapper} instances. {@link Container#mapperClass} should extend\n     * {@link Mapper}. By default {@link Mapper} is used to instantiate Mappers.\n     *\n     * @example <caption>Container#mapperClass</caption>\n     * // import { Container, Mapper } from 'js-data';\n     * const JSData = require('js-data');\n     * const { Container, Mapper } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * class MyMapperClass extends Mapper {\n     *   foo () { return 'bar' }\n     * }\n     * const store = new Container({\n     *   mapperClass: MyMapperClass\n     * });\n     * store.defineMapper('user');\n     * console.log(store.getMapper('user').foo());\n     *\n     * @name Container#mapperClass\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Constructor}\n     */\n    mapperClass: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply options provided by the user\n  utils.fillIn(this, opts)\n\n  /**\n   * Defaults options to pass to {@link Container#mapperClass} when creating a\n   * new {@link Mapper}.\n   *\n   * @example <caption>Container#mapperDefaults</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: {\n   *     idAttribute: '_id'\n   *   }\n   * });\n   * store.defineMapper('user');\n   * console.log(store.getMapper('user').idAttribute);\n   *\n   * @default {}\n   * @name Container#mapperDefaults\n   * @since 3.0.0\n   * @type {Object}\n   */\n  this.mapperDefaults = this.mapperDefaults || {}\n\n  // Use the Mapper class if the user didn't provide a mapperClass\n  this.mapperClass || (this.mapperClass = Mapper)\n}\n\nconst props = {\n  constructor: Container,\n\n  /**\n   * Register a new event listener on this Container.\n   *\n   * Proxy for {@link Component#on}. If an event was emitted by a {@link Mapper}\n   * in the Container, then the name of the {@link Mapper} will be prepended to\n   * the arugments passed to the listener.\n   *\n   * @example <caption>Container#on</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.on('foo', function (...args) { console.log(args.join(':')) });\n   * store.defineMapper('user');\n   * store.emit('foo', 'arg1', 'arg2');\n   * store.getMapper('user').emit('foo', 'arg1', 'arg2');\n   *\n   * @method Container#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n\n  /**\n   * Used to bind to events emitted by mappers in this container.\n   *\n   * @method Container#_onMapperEvent\n   * @param {string} name Name of the mapper that emitted the event.\n   * @param {...*} [args] Args See {@link Mapper#emit}.\n   * @private\n   * @since 3.0.0\n   */\n  _onMapperEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  },\n\n  /**\n   * Return a container scoped to a particular mapper.\n   *\n   * @example <caption>Container#as</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method Container#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} A container scoped to a particular mapper.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    proxiedMapperMethods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    return Object.create(this, props)\n  },\n\n  /**\n   * Create a new mapper and register it in this container.\n   *\n   * @example <caption>Container#defineMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: { foo: 'bar' }\n   * });\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(UserMapper.foo);\n   *\n   * @method Container#defineMapper\n   * @param {string} name Name under which to register the new {@link Mapper}.\n   * {@link Mapper#name} will be set to this value.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Container#mapperClass} when creating the new {@link Mapper}.\n   * @returns {Mapper} The newly created instance of {@link Mapper}.\n   * @see Container#as\n   * @since 3.0.0\n   */\n  defineMapper (name, opts) {\n    // For backwards compatibility with defineResource\n    if (utils.isObject(name)) {\n      opts = name\n      name = opts.name\n    }\n    if (!utils.isString(name)) {\n      throw utils.err(`${DOMAIN}#defineMapper`, 'name')(400, 'string', name)\n    }\n\n    // Default values for arguments\n    opts || (opts = {})\n    // Set Mapper#name\n    opts.name = name\n    opts.relations || (opts.relations = {})\n\n    // Check if the user is overriding the datastore's default mapperClass\n    const mapperClass = opts.mapperClass || this.mapperClass\n    delete opts.mapperClass\n\n    // Apply the datastore's defaults to the options going into the mapper\n    utils.fillIn(opts, this.mapperDefaults)\n\n    // Instantiate a mapper\n    const mapper = this._mappers[name] = new mapperClass(opts) // eslint-disable-line\n    mapper.relations || (mapper.relations = {})\n    // Make sure the mapper's name is set\n    mapper.name = name\n    // All mappers in this datastore will share adapters\n    mapper._adapters = this.getAdapters()\n\n    mapper.datastore = this\n\n    mapper.on('all', (...args) => this._onMapperEvent(name, ...args))\n    mapper.defineRelations()\n\n    return mapper\n  },\n\n  defineResource (name, opts) {\n    console.warn('DEPRECATED: defineResource is deprecated, use defineMapper instead')\n    return this.defineMapper(name, opts)\n  },\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Container#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   */\n  getAdapter (name) {\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  },\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Container#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   */\n  getAdapterName (opts) {\n    opts || (opts = {})\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || this.mapperDefaults.defaultAdapter\n  },\n\n  /**\n   * Return the registered adapters of this container.\n   *\n   * @method Container#getAdapters\n   * @returns {Adapter}\n   * @since 3.0.0\n   */\n  getAdapters () {\n    return this._adapters\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   *\n   * @example <caption>Container#getMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * store.getMapper('profile'); // throws Error, there is no mapper with name \"profile\"\n   *\n   * @method Container#getMapper\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapper (name) {\n    const mapper = this.getMapperByName(name)\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#getMapper`, name)(404, 'mapper')\n    }\n    return mapper\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   * Doesn't throw error if mapper doesn't exist.\n   *\n   * @example <caption>Container#getMapperByName</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(store.getMapper('profile')); // Does NOT throw an error\n   *\n   * @method Container#getMapperByName\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapperByName (name) {\n    return this._mappers[name]\n  },\n\n  /**\n   * Register an adapter on this container under the given name. Adapters\n   * registered on a container are shared by all mappers in the container.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   *\n   * @method Container#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for all Mappers in this container.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts) {\n    opts || (opts = {})\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.mapperDefaults.defaultAdapter = name\n      utils.forOwn(this._mappers, function (mapper) {\n        mapper.defaultAdapter = name\n      })\n    }\n  }\n}\n\nproxiedMapperMethods.forEach(function (method) {\n  props[method] = function (name, ...args) {\n    return this.getMapper(name)[method](...args)\n  }\n})\n\nComponent.extend(props)\n\n/**\n * Create a subclass of this Container:\n * @example <caption>Container.extend</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomContainerClass extends Container {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customContainer = new CustomContainerClass();\n * console.log(customContainer.foo());\n * console.log(CustomContainerClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherContainerClass = Container.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherContainer = new OtherContainerClass();\n * console.log(otherContainer.foo());\n * console.log(OtherContainerClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherContainerClass () {\n *   Container.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Container.extend({\n *   constructor: AnotherContainerClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherContainer = new AnotherContainerClass();\n * console.log(anotherContainer.created_at);\n * console.log(anotherContainer.foo());\n * console.log(AnotherContainerClass.beep());\n *\n * @method Container.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Container class.\n * @since 3.0.0\n */\n"},"lineCount":null}},"hash":"822b2e0256926c4dddfd9c7ee137ff98","cacheData":{"env":{}}}